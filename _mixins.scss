// Providing a PX fallback for REM font-sizes
@mixin rem($val, $baseline: 16) {
	font-size: ($val * $baseline) + px;
	font-size: $val + rem;
}

// Handling breakpoints for media queries
@mixin mq($breakpoint) {
	@if $breakpoint == xxl {
		@media (min-width: 86.375em) { @content; } //1382px
	}
	@if $breakpoint == xl {
		@media (min-width: 62em) { @content; } //992px
	}
	@if $breakpoint == l {
		@media (min-width: 48em) { @content; } //768px
	}
	@if $breakpoint == m {
		@media (min-width: 37.5em) { @content; } //600px
	}
	@if $breakpoint == s {
		@media (max-width: 30em) { @content; } //480px
	}
	// etc
}


// Clearfix
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
@mixin clearfix() {
	*zoom: 1;
	&:before,
	&:after {
		content: " "; // 1
		display: table; // 2
	}
	&:after {
		clear: both;
	}
}


// Center-align a block level element
@mixin center-block() {
	display: block;
	margin-left: auto;
	margin-right: auto;
}


// Sizing shortcuts
@mixin size($width, $height) {
	width: $width;
	height: $height;
}


// Text overflow
// Requires inline-block or block for proper styling
@mixin text-truncate() {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// Retina images
// Retina background-image support with non-retina fall back
@mixin hidpi($file-1x, $file-2x, $width-1x, $height-1x) {
	background-image: url("$file-1x");
	@media
	only screen and (-webkit-min-device-pixel-ratio: 2),
	only screen and (min--moz-device-pixel-ratio: 2),
	only screen and (-o-min-device-pixel-ratio: 2/1),
	only screen and (min-device-pixel-ratio: 2),
	only screen and (min-resolution: 192dpi),
	only screen and (min-resolution: 2dppx) {
		background-image: url("$file-2x");
		background-size: $width-1x $height-1x;
  	}
}



// Box sizing
@mixin box-sizing($sizing: border-box) {
	-webkit-box-sizing: $sizing;
	-moz-box-sizing: $sizing;
	box-sizing: $sizing;
}

// Single side border-radius
@mixin border-top-radius($radius: 3px) {
	border-top-right-radius: $radius;
	border-top-left-radius: $radius;
}

@mixin border-right-radius($radius: 3px) {
	border-bottom-right-radius: $radius;
	border-top-right-radius: $radius;
}

@mixin border-bottom-radius($radius: 3px) {
	border-bottom-right-radius: $radius;
	border-bottom-left-radius: $radius;
}

@mixin border-left-radius($radius: 3px) {
	border-bottom-left-radius: $radius;
	border-top-left-radius: $radius;
}

@mixin border-radius($radius: 3px) {
	-webkit-border-radius: $radius; /* Saf3-4, iOS 1-3.2, Android â‰¤1.6 */
	border-radius: $radius; /* Opera 10.5, IE9, Saf5, Chrome, FF4+, iOS 4, Android 2.1+ */
	/* Hiding background color from leaking outside the border */
	-webkit-background-clip: padding-box;
	-moz-background-clip: padding;
	background-clip: padding-box;
}


// Drop shadows
@mixin box-shadow($shadow: 0 1px 1px rgba(0,0,0,.3)) {
	-webkit-box-shadow: $shadow;
	-moz-box-shadow: $shadow;
	box-shadow: $shadow;
}


// Transitions
@mixin transition-type($transition: ease-in-out) {
	-webkit-transition: $transition;
	-moz-transition: $transition;
	-ms-transition: $transition;
	-o-transition: $transition;
	transition: $transition;
}
@mixin transition-delay($transition-delay: 0.3s) {
	-webkit-transition-delay: $transition-delay;
	-moz-transition-delay: $transition-delay;
	-o-transition-delay: $transition-delay;
	transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration: 0.3s) {
	-webkit-transition-duration: $transition-duration;
	-moz-transition-duration: $transition-duration;
	-o-transition-duration: $transition-duration;
	transition-duration: $transition-duration;
}
@mixin transition($transition: all 0.2s ease-in-out) {
	-webkit-transition: $transition;
	-moz-transition: $transition;
	-ms-transition: $transition;
	-o-transition: $transition;
	transition: $transition;
}

// Transformations
@mixin rotate($degrees) {
	-webkit-transform: rotate($degrees);
	-moz-transform: rotate($degrees);
	-ms-transform: rotate($degrees);
	-o-transform: rotate($degrees);
	transform: rotate($degrees);
}
@mixin scale($ratio) {
	-webkit-transform: scale($ratio);
	-moz-transform: scale($ratio);
	-ms-transform: scale($ratio);
	-o-transform: scale($ratio);
	transform: scale($ratio);
}
@mixin translate($x, $y) {
	-webkit-transform: translate($x, $y);
	-moz-transform: translate($x, $y);
	-ms-transform: translate($x, $y);
	-o-transform: translate($x, $y);
	transform: translate($x, $y);
}
@mixin skew($x, $y) {
	-webkit-transform: skew($x, $y);
	-moz-transform: skew($x, $y);
	-ms-transform: skewX($x) skewY($y); // See https://github.com/twitter/bootstrap/issues/4885
	-o-transform: skew($x, $y);
	transform: skew($x, $y);
	-webkit-backface-visibility: hidden; // See https://github.com/twitter/bootstrap/issues/5319
}
@mixin translate3d($x, $y, $z) {
	-webkit-transform: translate3d($x, $y, $z);
	-moz-transform: translate3d($x, $y, $z);
	-o-transform: translate3d($x, $y, $z);
	transform: translate3d($x, $y, $z);
}


// Backface visibility
//
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden
// See git pull https://github.com/dannykeane/bootstrap.git backface-visibility for examples
@mixin backface-visibility($visibility){
	-webkit-backface-visibility: $visibility;
	-moz-backface-visibility: $visibility;
	backface-visibility: $visibility;
}

// User select
//
// For selecting text on the page
@mixin user-select($select) {
	-webkit-user-select: $select;
	-moz-user-select: $select;
	-ms-user-select: $select;
	-o-user-select: $select;
	user-select: $select;
}


// Opacity
@mixin opacity($opacity: 1) {
	-webkit-opacity: $opacity;
	-moz-opacity: $opacity;
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: ~"alpha(opacity=$opacity-ie)"; // IE8
}


// Placeholder text
@mixin placeholder($color: #ccc) {
	&:-moz-placeholder            { color: $color; } // Firefox 4-18
	&::-moz-placeholder           { color: $color; } // Firefox 19+
	&:-ms-input-placeholder       { color: $color; } // Internet Explorer 10+
	&::-webkit-input-placeholder  { color: $color; } // Safari and Chrome
}


// Resize anything
@mixin resizable($direction: both) {
	resize: $direction; // Options: horizontal, vertical, both
	overflow: auto; // Safari fix
}


// CSS3 Content Columns
@mixin content-columns($width, $count, $gap) {
	-webkit-column-width: $width;
	-moz-column-width: $width;
	column-width: $width;
	-webkit-column-count: $count;
	-moz-column-count: $count;
	column-count: $count;
	-webkit-column-gap: $gap;
	-moz-column-gap: $gap;
	column-gap: $gap;
}


// Optional hyphenation
@mixin hyphens($mode: auto) {
	word-wrap: break-word;
	-webkit-hyphens: $mode;
	-moz-hyphens: $mode;
	-ms-hyphens: $mode;
	-o-hyphens: $mode;
	hyphens: $mode;
}


// Background gradients
@mixin horizontal($startColor: #555, $endColor: #333) {
	background-color: $endColor;
	background-image: -moz-linear-gradient(left, $startColor, $endColor); // FF 3.6+
	background-image: -webkit-gradient(linear, 0 0, 100% 0, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
	background-image: -webkit-linear-gradient(left, $startColor, $endColor); // Safari 5.1+, Chrome 10+
	background-image: -o-linear-gradient(left, $startColor, $endColor); // Opera 11.10
	background-image: linear-gradient(to right, $startColor, $endColor); // Standard, IE10
	background-repeat: repeat-x;
	filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb($startColor),argb($endColor))); // IE9 and down
}

@mixin vertical($startColor: #555, $endColor: #333) {
	background-color: $endColor;
	background-image: -moz-linear-gradient(top, $startColor, $endColor); // FF 3.6+
	background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
	background-image: -webkit-linear-gradient(top, $startColor, $endColor); // Safari 5.1+, Chrome 10+
	background-image: -o-linear-gradient(top, $startColor, $endColor); // Opera 11.10
	background-image: linear-gradient(to bottom, $startColor, $endColor); // Standard, IE10
	background-repeat: repeat-x;
	filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb($startColor),argb($endColor))); // IE9 and down
}

@mixin directional($startColor: #555, $endColor: #333, $deg: 45deg) {
	background-color: $endColor;
	background-repeat: repeat-x;
	background-image: -moz-linear-gradient($deg, $startColor, $endColor); // FF 3.6+
	background-image: -webkit-linear-gradient($deg, $startColor, $endColor); // Safari 5.1+, Chrome 10+
	background-image: -o-linear-gradient($deg, $startColor, $endColor); // Opera 11.10
	background-image: linear-gradient($deg, $startColor, $endColor); // Standard, IE10
}

@mixin radial($innerColor: #555, $outerColor: #333) {
	background-color: $outerColor;
	background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($innerColor), to($outerColor));
	background-image: -webkit-radial-gradient(circle, $innerColor, $outerColor);
	background-image: -moz-radial-gradient(circle, $innerColor, $outerColor);
	background-image: -o-radial-gradient(circle, $innerColor, $outerColor);
	background-repeat: no-repeat;
}


// Background size
@mixin background-size($background-size: cover) {
	-webkit-background-size: $background-size;
	-moz-background-size: $background-size;
	-o-background-size: $background-size;
	background-size: $background-size;
}


// Grid
@mixin make-row($grid-column-padding) {
	// Negative margin the row out to align the content of columns
	margin-left: -$grid-column-padding;
	margin-right: -$grid-column-padding;
	// Then clear the floated columns
	@include clearfix();
}

@mixin make-column($grid-float-breakpoint, $columns, $grid-columns, $grid-column-padding) {
	@media (min-width: $grid-float-breakpoint) {
		float: left;
		// Calculate width based on number of columns available
		width: percentage($columns / $grid-columns);
	}
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Set inner padding as gutters instead of margin
	padding-left: $grid-column-padding;
	padding-right: $grid-column-padding;
	// Proper box-model (padding doesn't add to width)
	@include box-sizing();
}

@mixin make-column-offset($grid-float-breakpoint, $columns, $grid-columns) {
	@media (min-width: $grid-float-breakpoint) {
		margin-left: percentage($columns / $grid-columns);
	}
}

//Flexbox layout module
//To-do


// Image rendering
@mixin image-rendering ($mode: optimizeQuality) {
	@if ($mode == optimize-contrast) {
		image-rendering: -moz-crisp-edges;
		image-rendering: -o-crisp-edges;
		image-rendering: -webkit-optimize-contrast;
		image-rendering: optimize-contrast;
	}

	@else {
		image-rendering: $mode;
	}
}